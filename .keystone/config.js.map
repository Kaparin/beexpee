{
  "version": 3,
  "sources": ["../keystone.ts", "../schema.ts", "../auth.ts"],
  "sourcesContent": ["// Welcome to Keystone!\n//\n// This file is what Keystone uses as the entry-point to your headless backend\n//\n// Keystone imports the default export of this file, expecting a Keystone configuration object\n//   you can find out more at https://keystonejs.com/docs/apis/config\n\nimport { config } from '@keystone-6/core';\n\n// to keep this file tidy, we define our schema in a different file\nimport { lists } from './schema';\n\n// authentication is configured separately here too, but you might move this elsewhere\n// when you write your list-level access control functions, as they typically rely on session data\nimport { withAuth, session } from './auth';\nimport { isSignedIn } from '@keystone-next/keystone/access';\n\nexport default withAuth(\n  config({\n    db: {\n      // we're using sqlite for the fastest startup experience\n      //   for more information on what database might be appropriate for you\n      //   see https://keystonejs.com/docs/guides/choosing-a-database#title\n      provider: 'sqlite',\n      url: 'file:./keystone.db',\n    },\n    lists,\n    session,\n  })\n);\n\n", "// schema.ts\n\nimport { list } from '@keystone-6/core';\nimport { allowAll } from '@keystone-6/core/access';\nimport {\n  text,\n  relationship,\n  password,\n  timestamp,\n  select,\n  // \u0414\u043E\u0431\u0430\u0432\u043B\u044F\u0435\u043C \u043D\u0435\u043E\u0431\u0445\u043E\u0434\u0438\u043C\u044B\u0435 \u0438\u043C\u043F\u043E\u0440\u0442\u044B \u0434\u043B\u044F \u043D\u043E\u0432\u044B\u0445 \u043F\u043E\u043B\u0435\u0439\n  // text, relationship, password, timestamp, select,\n} from '@keystone-6/core/fields';\n\nimport { document } from '@keystone-6/fields-document';\n\nimport type { Lists } from '.keystone/types';\n\nexport const lists: Lists = {\n  User: list({\n    access: allowAll,\n    fields: {\n      name: text({ validation: { isRequired: true } }),\n      email: text({\n        validation: { isRequired: true },\n        isIndexed: 'unique',\n      }),\n      password: password({ validation: { isRequired: true } }),\n      posts: relationship({ ref: 'Post.author', many: true }),\n      createdAt: timestamp({\n        defaultValue: { kind: 'now' },\n      }),\n      // \u0414\u043E\u0431\u0430\u0432\u043B\u044F\u0435\u043C \u043D\u043E\u0432\u044B\u0435 \u043F\u043E\u043B\u044F\n      skinProfile: text(),\n      nailProfile: text(),\n      hairProfile: text(),\n      dietProfile: text(),\n      fitnessProfile: text(),\n      dentalProfile: text(),\n    },\n  }),\n  Post: list({\n    access: allowAll,\n    fields: {\n      title: text({ validation: { isRequired: true } }),\n      content: document({\n        formatting: true,\n        layouts: [\n          [1, 1],\n          [1, 1, 1],\n          [2, 1],\n          [1, 2],\n          [1, 2, 1],\n        ],\n        links: true,\n        dividers: true,\n      }),\n      author: relationship({\n        ref: 'User.posts',\n        ui: {\n          displayMode: 'cards',\n          cardFields: ['name', 'email'],\n          inlineEdit: { fields: ['name', 'email'] },\n          linkToItem: true,\n          inlineConnect: true,\n        },\n        many: false,\n      }),\n      tags: relationship({\n        ref: 'Tag.posts',\n        many: true,\n        ui: {\n          displayMode: 'cards',\n          cardFields: ['name'],\n          inlineEdit: { fields: ['name'] },\n          linkToItem: true,\n          inlineConnect: true,\n          inlineCreate: { fields: ['name'] },\n        },\n      }),\n      // \u0414\u043E\u0431\u0430\u0432\u043B\u044F\u0435\u043C \u043D\u043E\u0432\u044B\u0435 \u043F\u043E\u043B\u044F\n      additionalField1: text(),\n      additionalField2: text(),\n      additionalField3: text(),\n    },\n  }),\n\n  Tag: list({\n    access: allowAll,\n    ui: {\n      isHidden: true,\n    },\n    fields: {\n      name: text(),\n      posts: relationship({ ref: 'Post.tags', many: true }),\n    },\n  }),\n};\n", "// Welcome to some authentication for Keystone\n//\n// This is using @keystone-6/auth to add the following\n// - A sign-in page for your Admin UI\n// - A cookie-based stateless session strategy\n//    - Using a User email as the identifier\n//    - 30 day cookie expiration\n//\n// This file does not configure what Users can do, and the default for this starter\n// project is to allow anyone - logged-in or not - to do anything.\n//\n// If you want to prevent random people on the internet from accessing your data,\n// you can find out how by reading https://keystonejs.com/docs/guides/auth-and-access-control\n//\n// If you want to learn more about how our out-of-the-box authentication works, please\n// read https://keystonejs.com/docs/apis/auth#authentication-api\n\nimport { randomBytes } from 'crypto';\nimport { createAuth } from '@keystone-6/auth';\n\n// see https://keystonejs.com/docs/apis/session for the session docs\nimport { statelessSessions } from '@keystone-6/core/session';\n\n// for a stateless session, a SESSION_SECRET should always be provided\n//   especially in production (statelessSessions will throw if SESSION_SECRET is undefined)\nlet sessionSecret = process.env.SESSION_SECRET;\nif (!sessionSecret && process.env.NODE_ENV !== 'production') {\n  sessionSecret = randomBytes(32).toString('hex');\n}\n\n// withAuth is a function we can use to wrap our base configuration\nconst { withAuth } = createAuth({\n  listKey: 'User',\n  identityField: 'email',\n\n  // this is a GraphQL query fragment for fetching what data will be attached to a context.session\n  //   this can be helpful for when you are writing your access control functions\n  //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n  sessionData: 'name createdAt',\n  secretField: 'password',\n\n  // WARNING: remove initFirstItem functionality in production\n  //   see https://keystonejs.com/docs/config/auth#init-first-item for more\n  initFirstItem: {\n    // if there are no items in the database, by configuring this field\n    //   you are asking the Keystone AdminUI to create a new user\n    //   providing inputs for these fields\n    fields: ['name', 'email', 'password'],\n\n    // it uses context.sudo() to do this, which bypasses any access control you might have\n    //   you shouldn't use this in production\n  },\n});\n\n// statelessSessions uses cookies for session tracking\n//   these cookies have an expiry, in seconds\n//   we use an expiry of 30 days for this starter\nconst sessionMaxAge = 60 * 60 * 24 * 30;\n\n// you can find out more at https://keystonejs.com/docs/apis/session#session-api\nconst session = statelessSessions({\n  maxAge: sessionMaxAge,\n  secret: sessionSecret!,\n});\n\nexport { withAuth, session };\n"],
  "mappings": "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",
  "names": ["import_core"]
}
